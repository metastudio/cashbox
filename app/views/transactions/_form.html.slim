= simple_form_for(transaction, remote: true, html: { class: 'form-horizontal transaction' },
    wrapper: :horizontal_form) do |f|
  = f.error_notification

  = f.input :amount, input_html: { value: f.object.amount == 0 ? nil : f.object.amount }

  - if f.object.category.try(:system?)
    = f.input :category, disabled: true
  - elsif params[:action] == 'new' || params[:action] == 'create'
    = f.association :category, as: :select,
      collection: current_organization.categories.where(type: type),
      prompt: 'Category', value_method: :id,
      selected: @q.nil? ? f.object.category_id \
        : (@q.category_id_eq && !Category.find(@q.category_id_eq).system? \
        ? @q.category_id_eq : nil)
  - else
    = f.association :category, as: :grouped_select,
      collection: current_organization.categories.grouped_by_type,
      group_method: :last, prompt: 'Category', value_method: :id,
      selected: f.object.category_id

  = f.input :customer_name, input_html: { data: { url: autocomplete_customers_path,
      placeholder: 'Customer',
      value: @q.nil? ? transaction.find_customer_name_by_id(f.object.customer_id) \
        : (@q.customer_id_eq ? transaction.find_customer_name_by_id(@q.customer_id_eq) : nil) } }

  - if f.object.bank_account.nil? || f.object.bank_account.visible?
    = f.association :bank_account, as: :grouped_select,
      collection: current_organization.bank_accounts.visible.positioned.grouped_by_currency(current_organization.default_currency),
      prompt: 'Bank account', group_method: :last,
      selected: @q.nil? ? f.object.bank_account_id \
        : (@q.bank_account_id_eq && current_organization.bank_accounts.find(@q.bank_account_id_eq).visible? \
        ? @q.bank_account_id_eq : nil)
  - else
    = f.input :bank_account, disabled: true

  = f.input :comment
  = f.input :date, as: :string, placeholder: 'Date',
    input_html: { class: 'datepicker', value: f.object.date.try(:strftime, '%d/%m/%Y') }
